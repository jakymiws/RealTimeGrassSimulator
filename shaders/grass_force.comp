#version 430

layout (std430, binding=0) buffer grassBladePosition {
    vec4 pos[];
};

layout (std430, binding=1) buffer grassBladeV1 {
    vec4 cV1[];
};

layout (std430, binding=2) buffer grassBladeV2 {
    vec4 cV2[];
};

layout (std430, binding=3) buffer grassProps {
    vec4 props[];
};

layout (std430, binding=5) buffer collisionForces {
    float collisions[];
};

layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

uniform float frameNum;

uniform vec4 sphereColliders[5];//xyz = center, w = radius
uniform int numSphereColliders;

void main()
{
    uint id = gl_GlobalInvocationID.x;

    float blade_stiffness = props[id].w;
    float blade_height = cV1[id].w;
    float blade_width = cV2[id].w;
    vec3 blade_up = props[id].xyz;
    
    float blade_direction_radians = pos[id].w;
    float sinDir = sin(blade_direction_radians);
    float cosDir = cos(blade_direction_radians);
    vec3 blade_direction = normalize(cross(blade_up, normalize(vec3(sinDir, sinDir+cosDir, cosDir))));
    vec3 front_direction = normalize(cross(blade_up, blade_direction));

    vec3 p = pos[id].xyz;
    vec3 v1 = cV1[id].xyz;
    vec3 v2 = cV2[id].xyz;

    //force computation
    float dt = 0.01;

    vec3 initialPoseV2 = p + blade_up*blade_height;

    float old_collision_force = collisions[id];
    float collision_force = max(old_collision_force - 0.5*dt, 0.0);

    vec3 recovery_force = (initialPoseV2 - v2) *  blade_stiffness * max(1-collision_force, 0.1);
    //vec3 recovery_force = (initialPoseV2 - v2)*blade_stiffness;

    float gravity_acceleration = 9.81;
    vec3 gravity_direction = vec3(0, -1.0 ,0);
    vec3 environmental_gravity = gravity_direction * gravity_acceleration*0.2;//regular physical gravity.
    vec3 local_front_gravity = 0.25 * length(environmental_gravity) * front_direction;//approximation of grass bending due to gravity.
    vec3 gravity_force = environmental_gravity + local_front_gravity;

    vec3 windDirection = normalize(vec3(1.0, 0.0, 1.0));
    float waveAmp = 1.0;
    float waveSpeed = 2.0;
    float waveLength = 2.0;
    float freq = 2.0/waveLength;
    float phaseConstantSpeed = waveSpeed * freq;
    float waveState = waveAmp * sin(dot(windDirection, p) * freq + (frameNum)*phaseConstantSpeed);

    vec3 wi = vec3(1.0, 0.0, 1.0) * waveState ;
    float windFd = 1 - abs( dot(normalize(wi), normalize(v2-p)));
    float windFr = dot(v2-p, blade_up)/blade_height;
    float windTheta = windFd*windFr;
    vec3 wind_force = wi*windTheta;

    vec3 computed_blade_translation = (recovery_force + gravity_force + wind_force) * dt;

    //apply integrated force
    v2 += computed_blade_translation;

    //collisions
    vec3 sphereCenter = sphereColliders[0].xyz;
    float sphereRadius = sphereColliders[0].w;

    vec3 curveMidPoint = 0.25*p + 0.5*v1 + 0.25*v2;

    vec3 distCV2 = sphereCenter - v2; 
    vec3 distCM = sphereCenter - curveMidPoint;

    vec3 displacementV2 = min(length(distCV2)-sphereRadius, 0.0) * normalize(distCV2);
    vec3 displacementM = min(length(distCM)-sphereRadius, 0.0) * normalize(distCM);

    v2 += displacementV2 + displacementM;

    float minCv2 = min(length(distCV2)-sphereRadius, 0.0);
    float minM = min(length(distCM)-sphereRadius, 0.0);

    collisions[id] += dot(displacementV2+displacementM, displacementV2+displacementM);

    //validate state of control points
    v2 = v2 - blade_up * min(blade_up*(v2-p), 0.0);

    float lengthProj = length(v2 - p - blade_up*((v2-p)*blade_up));

    if (abs(lengthProj) > 0.00001)
    {
        float lpH = lengthProj/blade_height;
        v1 = p + blade_height * blade_up * max(1 - lpH, 0.05*max(lpH, 1.0));
    }

    float L = (2*length(p-v2) + length(p-v1) + length(v1-v2)) / 3.0;
    float r = blade_height/L;

    vec3 v1_corrected = p + r*(v1-p);
    vec3 v2_corrected = v1_corrected + r*(v2-v1);

    cV1[id] = vec4(v1_corrected, blade_height);
    cV2[id] = vec4(v2_corrected, blade_width);

    //culling
    

}