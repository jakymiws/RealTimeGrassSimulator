#version 430 core

layout (quads, equal_spacing, ccw) in;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

patch in vec4 teV1;//w = height
patch in vec4 teV2;//w = width
patch in vec4 teProps;//xyz = up, w = stiffness

patch in float teAge;
patch in vec3 teBladeDir;
//patch in vec3 teBladeUp;

out vec3 fragNormal;
out vec2 fragUV;
out vec4 fragPosition;
out float fragAge;

vec3 BladeTriangle(vec3 i1, vec3 i2, float u, float v)
{
    float subU = 1.0 - u;
    vec3 position = mix(i1, i2, u + ((-v*u) + (v*subU))*0.5);
    return position;
}

vec3 BladeQuadCurve(vec3 i1, vec3 i2, float u, float v, vec3 normal, float w)
{
    vec3 position = normal * w * (0.5 - abs(u-0.5)) * (1.0-v);
    return mix(i1, i2, u - pow(v,2)*u) + position;
}

void main()
{
    fragAge = teAge;

    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    //todo:
    //use tess coords to fake a normal for lighting. Straight down at bottom, straight up at the top, interpolating in between.

    float bladeWidth = teV2.w;

    vec3 offset = teBladeDir * teV2.w;
    vec3 half_offset = offset * 0.5;

    vec3 p0 = gl_in[0].gl_Position.xyz - half_offset;
    vec3 p1 = teV1.xyz - half_offset;
    vec3 p2 = teV2.xyz - half_offset;

    vec3 h1 = p0 + v * (p1 - p0);
    vec3 h2 = p1 + v * (p2 - p1);
    vec3 i1 = h1 + v * (h2 - h1);
    vec3 i2 = i1 + offset;

    //vec3 biTangent = teBladeDir;
    //vec3 tangent = teBladeUp;

    fragUV = vec2(u,v);
    //fragNormal = tangent;
    //fragNormal = normalize(cross(tangent, biTangent));
    //fragNormal = normalize(h1*h2);
    fragNormal = (model * vec4(fragNormal,1.0)).xyz;

    vec3 position = BladeTriangle(i1, i2, u, v);
   // vec3 position = BladeQuadCurve(i1, i2, u, v, fragNormal, bladeWidth);

    gl_Position = projection * view * model * vec4(position, 1.0);
    vec4 mPos = (model * vec4(position, 1.0));
    fragPosition = vec4(mPos.xyz, abs(sin(2.0*teV1.w)));

}
